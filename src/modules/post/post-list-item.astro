---
import FormattedDate from '@/components/formatted-date.astro'
import Link from '@/components/link.astro'
import { CLS_COLOR_DIVIDER } from '@/configs/colors'
import type { CollectionEntry } from 'astro:content'
import { getEntry } from 'astro:content'

type Props = {
  post: CollectionEntry<'post'>
  arrow: 'to-left' | 'to-right' | 'none' | undefined
  headingLevel: 'h2' | 'h3'
  filterable: boolean
  type: 'simple' | 'detailed'
}

const { post, arrow, filterable, type, headingLevel: Hx } = Astro.props
const { title, description, publishedOn, category: categoryRef } = post.data
const category = await getEntry(categoryRef)
const tagsClassNames = filterable ? post.data.tags.map((tagRef) => `tag-${tagRef.id}`) : []
const categoryClassNames = filterable ? `category-${post.data.category.id}` : null
---

<li
  class:list={[
    'px-4 py-4 relative flex flex-col gap-y-1 hover:shadow',
    ...tagsClassNames,
    categoryClassNames,
    'post-item',
  ]}
>
  <Hx
    class:list={[
      'flex items-center',
      {
        'text-lg': type === 'simple',
        'text-xl': type === 'detailed',
      },
    ]}
  >
    <Link
      href={`/post/${post.id}`}
      class="after:absolute after:top-0 after:left-0 after:right-0 after:bottom-0 after:content-[' '] flex items-center"
    >
      {arrow === 'to-left' ? <span class='mr-2'>←</span> : null}
      <span>{title}</span>
      {arrow === 'to-right' ? <span class='ml-2'>→</span> : null}
    </Link>
    {!publishedOn && type !== 'detailed' ? <span class='inline-block ml-2 px-1 border text-xs'>Draft</span> : null}
  </Hx>
  {
    type === 'detailed' ? (
      <>
        <div class:list={['text-xs divide-x', CLS_COLOR_DIVIDER]}>
          <span class='pr-2'>
            <Link href={`/category/${category.id}`}>{category.data.name}</Link>
          </span>
          {publishedOn ? <FormattedDate date={publishedOn} class='px-2' /> : <span class='px-2'>In Draft</span>}
        </div>
        <p>{description}</p>
      </>
    ) : null
  }
</li>
