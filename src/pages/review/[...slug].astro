---
import FormattedDate from '@/components/formatted-date.astro'
import Link from '@/components/link.astro'
import TableOfContents from '@/components/table-of-contents.astro'
import { COLOR_BG_MUTED, COLOR_TEXT_MUTED } from '@/configs/colors'
import Layout from '@/layout/index.astro'
import ReviewList from '@/modules/review/review-list.astro'
import Tag from '@/modules/tag/tag.astro'
import { getReviews } from '@/utils/review-content.utils'
import { type CollectionEntry, getEntries, render } from 'astro:content'

export async function getStaticPaths() {
  const reviews = await getReviews()
  const reviewsCount = reviews.length
  return reviews.map((review, index) => ({
    params: { slug: review.id },
    props: {
      review,
      prevReview: index + 1 !== reviewsCount ? reviews[index + 1] : null,
      nextReview: index !== 0 ? reviews[index - 1] : null
    }
  }))
}
type Props = {
  review: CollectionEntry<'review'>
  prevReview: CollectionEntry<'review'> | null
  nextReview: CollectionEntry<'review'> | null
}

const { review, prevReview, nextReview } = Astro.props
const { title, description, readingDate, lastUpdatedDate } = review.data
const tags = await getEntries(review.data.tags)
const { Content, headings } = await render(review)
---

<Layout title={title} description={description || 'No Description'}>
  <article class=''>
    <h1 class='text-4xl font-light'>{title}</h1>

    <div class:list={['my-2 flex text-sm', COLOR_TEXT_MUTED]}>
      {readingDate ? <FormattedDate date={readingDate} /> : null}
      {
        readingDate && lastUpdatedDate && readingDate.toISOString() !== lastUpdatedDate.toISOString() ? (
          <span class='ml-4'>
            Last updated: <FormattedDate date={lastUpdatedDate} />
          </span>
        ) : null
      }
    </div>
    <p class='my-8 text-2xl font-light'>{description}</p>
    {headings.length ? <TableOfContents headings={headings} /> : null}

    <div class:list={[COLOR_TEXT_MUTED, COLOR_BG_MUTED, 'flex items-center text-sm font-bold px-4 py-3']} role='alert'>
      <svg class='fill-current w-4 h-4 mr-2' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'
        ><path
          d='M12.432 0c1.34 0 2.01.912 2.01 1.957 0 1.305-1.164 2.512-2.679 2.512-1.269 0-2.009-.75-1.974-1.99C9.789 1.436 10.67 0 12.432 0zM8.309 20c-1.058 0-1.833-.652-1.093-3.524l1.214-5.092c.211-.814.246-1.141 0-1.141-.317 0-1.689.562-2.502 1.117l-.528-.88c2.572-2.186 5.531-3.467 6.801-3.467 1.057 0 1.233 1.273.705 3.23l-1.391 5.352c-.246.945-.141 1.271.106 1.271.317 0 1.357-.392 2.379-1.207l.6.814C12.098 19.02 9.365 20 8.309 20z'
        ></path></svg
      >
      <p><Link href={review.data.articleLink}>Read the original article here.</Link></p>
    </div>
    <div class='prose dark:prose-invert max-w-none'>
      <Content />
    </div>
  </article>

  <hr class='my-8' />

  <div class='flex flex-wrap gap-x-5 gap-y-1 text-sm'>
    {tags.map((tag) => <Tag tag={tag} />)}
  </div>

  <nav class='mt-12'>
    <h2 class='text-lg italic'>Read Next</h2>
    <ReviewList headingLevel='h3' reviews={[]} nextReview={nextReview} prevRreview={prevReview} />
  </nav>
</Layout>
