---
import Breadcrumb from '@/components/breadcrumb.astro'
import FormattedDate from '@/components/formatted-date.astro'
import Markdown from '@/components/markdown.astro'
import TableOfContents from '@/components/table-of-contents.astro'
import Layout from '@/layout/index.astro'
import BlogList from '@/modules/blog/blog-list.astro'
import Tag from '@/modules/tag/tag.astro'
import { getBlogs } from '@/utils/blog-content.utils'
import { Image } from 'astro:assets'
import { getEntries, getEntry, render } from 'astro:content'

export async function getStaticPaths() {
  const posts = await getBlogs()
  const postCount = posts.length
  return posts.map((post, index) => ({
    params: { slug: post.id },
    props: {
      post,
      prevPost: index + 1 !== postCount ? posts[index + 1] : null,
      nextPost: index !== 0 ? posts[index - 1] : null
    }
  }))
}

const { post, prevPost, nextPost } = Astro.props
const { title, description, publishedOn, lastUpdatedOn, image, imageCredit } = post.data
const tags = await getEntries(post.data.tags)
const category = await getEntry(post.data.category)
const { Content, headings } = await render(post)
---

<Layout title={title} description={description}>
  <Breadcrumb
    crumbs={[
      { name: 'Blog', href: '/blog' },
      { name: category.data.name, href: `/category/${category.id}` },
      { name: title, href: '' }
    ]}
  />
  <article data-pagefind-body>
    <h1 class='text-4xl font-light'>{title}</h1>
    <div class:list={['my-2 flex text-sm']}>
      <span data-pagefind-filter='category'>{category.data.name}</span>
      {publishedOn ? <FormattedDate date={publishedOn} /> : null}
      {
        lastUpdatedOn && publishedOn && publishedOn.toISOString() !== lastUpdatedOn.toISOString() ? (
          <span class='ml-4'>
            Last updated: <FormattedDate date={lastUpdatedOn} />
          </span>
        ) : null
      }
    </div>
    <p class='my-8 text-2xl font-light'>{description}</p>
    {
      image ? (
        <figure class='my-8'>
          <Image src={image} alt={title} class='w-full' />
          {imageCredit ? <figcaption class='text-center text-xs italic' set:html={imageCredit} /> : null}
        </figure>
      ) : null
    }
    {headings.length ? <TableOfContents headings={headings} /> : null}
    <Markdown elem='div'>
      <Content />
    </Markdown>
  </article>

  <hr class='my-8' />

  <div class='flex flex-wrap gap-x-5 gap-y-1 text-sm'>
    {tags.map((tag) => <Tag tag={tag} type='link' filterTag='tag' />)}
  </div>

  <nav class='mt-12'>
    <h2 class='text-lg italic'>Read Next</h2>
    <BlogList nextBlog={nextPost} prevBlog={prevPost} type='next-prev' />
  </nav>
</Layout>
