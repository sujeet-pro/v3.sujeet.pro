---
import { getCollection, type CollectionEntry, render } from 'astro:content'
import FormattedDate from '$components/formatted-date.astro'
import Layout from '$layout'
import { getEntries } from 'astro:content'
import Tag from '$components/tag.astro'
import PostPreviewItem from '$components/post-preview-item.astro'
import TableOfContents from '$components/table-of-contents.astro'

export async function getStaticPaths() {
  const posts = await getCollection('blog', (post) => import.meta.env.DEV || !post.data.isDraft)
  const postCount = posts.length
  return posts.map((post, index) => ({
    params: { slug: post.id },
    props: {
      post,
      prevPost: index + 1 !== postCount ? posts[index + 1] : null,
      nextPost: index !== 0 ? posts[index - 1] : null
    }
  }))
}
type Props = {
  post: CollectionEntry<'blog'>
  prevPost: CollectionEntry<'blog'> | null
  nextPost: CollectionEntry<'blog'> | null
}

const { post, prevPost, nextPost } = Astro.props
const { title, description, pubDate, lastUpdatedDate } = post.data
// console.log(post.data.tags)
const tags = await getEntries(post.data.tags)
const { Content, headings } = await render(post)
---

<Layout title={title} description={description}>
  <article class=''>
    <h1 class='text-4xl font-light'>{title}</h1>

    <div class='my-2 flex'>
      <FormattedDate date={pubDate} />
      {
        lastUpdatedDate ? (
          <span class='ml-4'>
            Last updated: <FormattedDate date={lastUpdatedDate} />
          </span>
        ) : null
      }
    </div>
    <p class='my-8'>{description}</p>
    <TableOfContents headings={headings} />
    <div class='prose dark:prose-invert max-w-none'>
      <Content />
    </div>
  </article>

  <div class='flex flex-wrap gap-x-5 gap-y-1 text-sm'>
    {tags.map((tag) => <Tag tag={tag} />)}
  </div>

  <nav class='mt-12'>
    <ul>
      {prevPost ? <PostPreviewItem post={prevPost} /> : null}
      {nextPost ? <PostPreviewItem post={nextPost} /> : null}
    </ul>
  </nav>
</Layout>
